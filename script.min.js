const USERS = {
    admin: "8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918",
    user: "04f8996da763b7a969b1028ee3007569eaf3a635486ddab211d512c85b9df8fb",
  },
  GOOGLE_CONFIG = {
    client_id: "YOUR_GOOGLE_CLIENT_ID.apps.googleusercontent.com",
    api_key: "YOUR_API_KEY",
    discovery_doc: "https://www.googleapis.com/discovery/v1/apis/drive/v3/rest",
    scopes: "https://www.googleapis.com/auth/drive.readonly",
  };
let gapi_loaded = !1,
  google_initialized = !1,
  current_user = null;
function hashPassword(e) {
  return CryptoJS.SHA256(e).toString();
}
function showElement(e) {
  document.getElementById(e).style.display = "block";
}
function hideElement(e) {
  document.getElementById(e).style.display = "none";
}
function showError(e) {
  const t = document.getElementById("errorMessage");
  (t.textContent = e),
    (t.style.display = "block"),
    setTimeout(() => (t.style.display = "none"), 5e3);
}
function showSuccess(e) {
  const t = document.getElementById("successMessage");
  (t.textContent = e),
    (t.style.display = "block"),
    setTimeout(() => (t.style.display = "none"), 3e3);
}
document
  .getElementById("loginFormElement")
  .addEventListener("submit", function (e) {
    e.preventDefault();
    const t = document.getElementById("username").value,
      n = document.getElementById("password").value,
      a = hashPassword(n);
    USERS[t] && USERS[t] === a
      ? ((current_user = t),
        showSuccess("Login successful!"),
        setTimeout(() => {
          hideElement("loginForm"),
            showElement("portalContent"),
            loadGoogleAPI();
        }, 1e3))
      : showError("Invalid username or password");
  });
function loadGoogleAPI() {
  "undefined" == typeof gapi
    ? (((e = document.createElement("script")).src =
        "https://apis.google.com/js/api.js"),
      (e.onload = initializeGAPI),
      document.head.appendChild(e))
    : initializeGAPI();
}
async function initializeGAPI() {
  try {
    await new Promise((e) => {
      gapi.load("client:auth2", e);
    }),
      (gapi_loaded = !0);
    if (GOOGLE_CONFIG.client_id.includes("YOUR_"))
      return (
        (document.getElementById("connectDriveBtn").innerHTML =
          "‚ö†Ô∏è Setup Required"),
        (document.getElementById("connectDriveBtn").disabled = !0),
        void showError(
          "Google API credentials not configured. Please set up your Client ID and API Key."
        )
      );
    await gapi.client.init({
      apiKey: GOOGLE_CONFIG.api_key,
      clientId: GOOGLE_CONFIG.client_id,
      discoveryDocs: [GOOGLE_CONFIG.discovery_doc],
      scope: GOOGLE_CONFIG.scopes,
    }),
      (google_initialized = !0);
  } catch (e) {
    console.error("Error initializing Google API:", e),
      showError("Failed to initialize Google Drive connection");
  }
}
document
  .getElementById("connectDriveBtn")
  .addEventListener("click", async function () {
    if (!google_initialized)
      return void showError("Google API not initialized");
    try {
      const e = gapi.auth2.getAuthInstance();
      await e.signIn(),
        updateDriveStatus(!0),
        showElement("driveContent"),
        showElement("refreshFilesBtn"),
        loadDriveFiles();
    } catch (e) {
      console.error("Error connecting to Google Drive:", e),
        showError("Failed to connect to Google Drive");
    }
  });
function updateDriveStatus(e) {
  const t = document.getElementById("driveStatus");
  e
    ? ((t.textContent = "üìÇ Google Drive: Connected"),
      (t.className = "status-indicator status-connected"))
    : ((t.textContent = "üìÇ Google Drive: Not Connected"),
      (t.className = "status-indicator status-disconnected"));
}
async function loadDriveFiles() {
  const e = document.getElementById("fileList");
  e.innerHTML =
    '<div class="loading"><div class="spinner"></div>Loading files...</div>';
  try {
    const t = await gapi.client.drive.files.list({
        pageSize: 20,
        fields: "nextPageToken, files(id, name, mimeType, modifiedTime, size)",
        orderBy: "modifiedTime desc",
      }),
      n = t.result.files;
    if (!n || 0 === n.length)
      return void (e.innerHTML = '<div class="loading">No files found</div>');
    let a = "";
    n.forEach((e) => {
      const t = getFileIcon(e.mimeType),
        n = e.size ? formatFileSize(e.size) : "Unknown",
        o = new Date(e.modifiedTime).toLocaleDateString();
      a += `<div class="file-item"><span class="file-icon">${t}</span><div style="flex-grow: 1;"><div style="font-weight: 500;">${e.name}</div><div style="font-size: 0.8rem; color: #666;">${n} ‚Ä¢ Modified ${o}</div></div><button onclick="openFile('${e.id}')" style="background: #4285f4; color: white; border: none; padding: 5px 10px; border-radius: 3px; cursor: pointer;">Open</button></div>`;
    }),
      (e.innerHTML = a);
  } catch (t) {
    console.error("Error loading files:", t),
      (e.innerHTML =
        '<div class="loading" style="color: #dc3545;">Error loading files</div>');
  }
}
function getFileIcon(e) {
  return e.includes("folder")
    ? "üìÅ"
    : e.includes("document")
    ? "üìÑ"
    : e.includes("spreadsheet")
    ? "üìä"
    : e.includes("presentation")
    ? "üìΩÔ∏è"
    : e.includes("image")
    ? "üñºÔ∏è"
    : e.includes("video")
    ? "üé•"
    : e.includes("audio")
    ? "üéµ"
    : e.includes("pdf")
    ? "üìï"
    : "üìÑ";
}
function formatFileSize(e) {
  if (0 === e) return "0 Bytes";
  const t = Math.floor(Math.log(e) / Math.log(1024));
  return (
    Math.round((e / Math.pow(1024, t)) * 100) / 100 +
    " " +
    ["Bytes", "KB", "MB", "GB"][t]
  );
}
function openFile(e) {
  window.open(`https://drive.google.com/file/d/${e}/view`, "_blank");
}
document
  .getElementById("refreshFilesBtn")
  .addEventListener("click", loadDriveFiles),
  document.getElementById("logoutBtn").addEventListener("click", function () {
    if (google_initialized && gapi.auth2) {
      const e = gapi.auth2.getAuthInstance();
      e.isSignedIn.get() && e.signOut();
    }
    (current_user = null),
      (document.getElementById("username").value = ""),
      (document.getElementById("password").value = ""),
      updateDriveStatus(!1),
      hideElement("driveContent"),
      hideElement("refreshFilesBtn"),
      hideElement("portalContent"),
      showElement("loginForm"),
      showSuccess("Logged out successfully");
  }),
  console.log("Demo Credentials:"),
  console.log("Username: admin, Password: admin123"),
  console.log("Username: user, Password: user123"),
  console.log(""),
  console.log("To enable Google Drive integration:"),
  console.log("1. Go to Google Cloud Console"),
  console.log("2. Create a project and enable Drive API"),
  console.log("3. Create credentials (OAuth 2.0 Client ID and API Key)"),
  console.log("4. Replace GOOGLE_CONFIG values in the code");
